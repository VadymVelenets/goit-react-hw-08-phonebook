{"version":3,"file":"static/js/688.6287cc9f.chunk.js","mappings":"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","sources":["../node_modules/nanoid/url-alphabet/index.js","../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","redux/contacts/contactsSelectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactListItem.jsx","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/views/ContactsView/ContactsView.module.css?919f","views/ContactsView/ContactsView.js"],"sourcesContent":["export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { urlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += urlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__y0Rca\",\"contactFormItem\":\"ContactForm_contactFormItem__hO2j7\",\"contactBtn\":\"ContactForm_contactBtn__Hbm5v\"};","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { Notify } from 'notiflix';\nimport {\n  useAddContactMutation,\n  useGetContactsQuery,\n} from 'services/contactsApi';\n\nimport style from './ContactForm.module.css';\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '',\n};\n\nconst ContactForm = () => {\n  const [name, setName] = useState(INITIAL_STATE.name);\n  const [number, setNumber] = useState(INITIAL_STATE.number);\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n  const { data: contacts } = useGetContactsQuery();\n  const [addContact] = useAddContactMutation();\n\n  const onSubmit = event => {\n    event.preventDefault();\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      return Notify.failure(`Contact '${name}' is already exist`);\n    }\n    const id = nanoid();\n    addContact({ id, name, number });\n    reset();\n  };\n\n  const reset = () => {\n    setName(INITIAL_STATE.name);\n    setNumber(INITIAL_STATE.number);\n  };\n\n  return (\n    <form className={style.FormInput} onSubmit={onSubmit}>\n      <label htmlFor={nameInputId}>Name</label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        maxLength=\"40\"\n        required\n        value={name}\n        onChange={event => setName(event.target.value)}\n        id={nameInputId}\n        className={style.FormInput__input}\n      />\n      <label htmlFor={numberInputId}>Number</label>\n      <input\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        maxLength=\"12\"\n        required\n        value={number}\n        onChange={event => setNumber(event.target.value)}\n        id={numberInputId}\n        className={style.FormInput__input}\n      />\n      <button type=\"submit\" className={style.FormButton}>\n        Add Contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;","export const getFilter = state => state.contactsReducer.filter;","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"contact\":\"ContactList_contact__0STHS\",\"button\":\"ContactList_button__7kL4l\"};","import PropTypes from 'prop-types';\nimport { useDeleteContactMutation } from 'services/contactsApi';\nimport style from './ContactList.module.css';\n\nconst ContactListItem = ({ id, name, number }) => {\n  const [deleteContact] = useDeleteContactMutation();\n  return (\n    <>\n      <li className={style.ContactList__item} key={id}>\n        <span className={style.ContactList__text}>\n          {name}: {number}\n        </span>\n        <button\n          className={style.ContactList__button}\n          onClick={() => deleteContact(id)}\n        >\n          Delete\n        </button>\n      </li>\n    </>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default ContactListItem;","import { useSelector } from 'react-redux';\nimport { getFilter } from '../../redux/contacts/contactsSelectors';\nimport { useGetContactsQuery } from 'services/contactsApi';\nimport ContactListItem from './ContactListItem';\nimport Loader from '../Loader/Loader';\nimport PropTypes from 'prop-types';\nimport style from './ContactList.module.css';\n\nconst ContactList = () => {\n  const filter = useSelector(getFilter);\n\n  const { data: contacts, isFetching, isError } = useGetContactsQuery();\n\n  const filteredContacts =\n    contacts &&\n    contacts.filter(contact => contact.name.toLowerCase().includes(filter));\n\n  const isContactsEmpty = filteredContacts && filteredContacts.length > 0;\n\n  return (\n    <>\n      {isFetching && <Loader color={'#3f51b5'} size={32} />}\n      {isError && console.log(isError)}\n      {isContactsEmpty ? (\n        <ul className={style.ContactList__list}>\n          {filteredContacts.map(({ id, name, number }) => (\n            <ContactListItem key={id} id={id} name={name} number={number} />\n          ))}\n        </ul>\n      ) : (\n        <ul className={style.ContactList__list}>\n          <p>No contacts found...</p>\n        </ul>\n      )}\n    </>\n  );\n};\n\nContactList.propTypes = {\n  filteredContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default ContactList;","// extracted by mini-css-extract-plugin\nexport default {\"filterContainer\":\"Filter_filterContainer__8G57N\",\"filterName\":\"Filter_filterName__Y2kKA\",\"filterField\":\"Filter_filterField__hjFfe\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from '../../redux/contacts/contactsSelectors';\nimport { filterContact } from '../../redux/contacts/contactsActions';\n\nimport style from './Filter.module.css';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  return (\n    <div className={style.FilterContainer}>\n      <label>\n        Find contacts by name\n        <input\n          type=\"text\"\n          name=\"filter\"\n          className={style.FilterInput}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Find contacts by name\"\n          placeholder=\"Enter search request here\"\n          value={filter}\n          onChange={event => dispatch(filterContact(event))}\n        />\n      </label>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n};\n\nexport default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"ContactsView_section__UJU9N\",\"title\":\"ContactsView_title__ATNZX\"};","import ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport styles from './ContactsView.module.css';\n\nexport default function ContactsView() {\n  return (\n    <div className={styles.section}>\n      <h1 className={styles.title}>PHONEBOOK APP</h1>\n      <h2>Add new contact</h2>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}"],"names":["urlAlphabet","nanoid","size","arguments","length","undefined","id","bytes","crypto","getRandomValues","Uint8Array","INITIAL_STATE","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","number","setNumber","nameInputId","numberInputId","contacts","useGetContactsQuery","data","_useAddContactMutatio","useAddContactMutation","addContact","reset","_jsxs","className","style","onSubmit","event","preventDefault","find","contact","toLowerCase","Notify","concat","children","_jsx","htmlFor","type","pattern","title","maxLength","required","value","onChange","target","getFilter","state","contactsReducer","filter","_ref","_useDeleteContactMuta","useDeleteContactMutation","deleteContact","_Fragment","onClick","useSelector","_useGetContactsQuery","isFetching","isError","filteredContacts","includes","isContactsEmpty","Loader","color","console","log","map","ContactListItem","dispatch","useDispatch","placeholder","filterContact","ContactsView","styles","ContactForm","Filter","ContactList"],"sourceRoot":""}